name: tests

on: [push, pull_request]

jobs:
  build:
    # Don't run twice for internal PRs from our own repo
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10' ]
        tmux-version: [ '2.6', '2.7', '2.8', '3.0a', '3.1b', '3.2a', 'master' ]
        # balance ci coverage across supported python/tmux versions with CI speed
        include:
          - python-version: '3.9'
            tmux-version: '2.6'
          - python-version: '3.9'
            tmux-version: 'master'
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry
      run: |
        curl -O -sSL https://install.python-poetry.org/install-poetry.py
        python install-poetry.py -y --version 1.1.12
        echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
        rm install-poetry.py

    - name: Add ~/.local/bin to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Get poetry cache paths from config
      run: |
        echo "poetry_cache_dir=$(poetry config --list | sed -n 's/.*cache-dir = //p' | sed -e 's/^\"//' -e 's/\"$//')" >> $GITHUB_ENV
        echo "poetry_virtualenvs_path=$(poetry config --list | sed -n 's/.*virtualenvs.path = .* # //p' | sed -e 's/^\"//' -e 's/\"$//')" >> $GITHUB_ENV

    - name: Configure poetry
      shell: bash
      run: poetry config virtualenvs.in-project true

    - name: Set up poetry cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          .venv
          ${{ env.poetry_cache_dir }}
          ${{ env.poetry_virtualenvs_path }}
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Setup tmux build cache for tmux ${{ matrix.tmux-version }}
      id: tmux-build-cache
      uses: actions/cache@v3
      with:
        path: ~/tmux-builds/tmux-${{ matrix.tmux-version }}
        key: tmux-${{ matrix.tmux-version }}

    - name: Build tmux ${{ matrix.tmux-version }}
      if: steps.tmux-build-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt install libevent-dev libncurses5-dev libtinfo-dev libutempter-dev bison
        mkdir ~/tmux-builds
        mkdir ~/tmux-src
        git clone https://github.com/tmux/tmux.git ~/tmux-src/tmux-${{ matrix.tmux-version }}
        cd ~/tmux-src/tmux-${{ matrix.tmux-version }}
        git checkout ${{ matrix.tmux-version }}
        sh autogen.sh
        ./configure --prefix=$HOME/tmux-builds/tmux-${{ matrix.tmux-version }} && make && make install
        export PATH=$HOME/tmux-builds/tmux-${{ matrix.tmux-version }}/bin:$PATH
        cd ~
        tmux -V

    - name: Install python dependencies
      run: |
        poetry install -E "test coverage lint"
    - name: Lint with flake8
      run: |
        poetry run flake8
    - name: Test with pytest
      continue-on-error: ${{ matrix.tmux-version == 'master' }}
      run: |
        export PATH=$HOME/tmux-builds/tmux-${{ matrix.tmux-version }}/bin:$PATH
        ls $HOME/tmux-builds/tmux-${{ matrix.tmux-version }}/bin
        tmux -V
        poetry run py.test --cov=./ --cov-report=xml
    - uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Build package
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      run: poetry build

    - name: Publish package
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
